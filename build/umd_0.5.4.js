/* Generated by Brace_UMD 0.5.4 */
!function(e, i, o, t) {
    var __filename, __dirname, define, requirejs, require, n = {
        e: 'object' == typeof module,
        i: !1,
        factory: function(i, o, t, n) {
            if (i && i.constructor === Array && this.o) {
                var s = i, r = dependency;
                n = n, t = t, dependency = s, i = __filename || '';
            }
            'string' != typeof i ? console.log('The factory Object is being used but the module does not supply an id parameter. Skipping loading of the module.') : o.every(function(o) {
                return o in e || !!console.log('The dependency', o, 'is not loaded into the factory. Skipping loading of the module', i);
            }, this) && (e[i] = t.apply(t.prototype, o.map(function(e, i) {
                return this[e];
            }, e)));
        },
        requirejs: o,
        define: i,
        t: 'object' == typeof t && t || {},
        n: function() {
            var e = {
                define: !this.t.auto_anonymous && this.define || this.s.bind(this),
                requirejs: this.requirejs || this.r.bind(this),
                require: this.requirejs || this.e && module.require || this.factory.bind(this),
                factory: this.factory
            }, i = this.t.force_type && this.t.force_type.toString() || '';
            i && (!i in e ? console.log('The forced type', i, 'specified as an option is not supported by Brace UMD. Supported types are', Object.keys(e)) : (console.log('Forcing use of the definition type', i), 
            e.requirejs = e.require = e.define = e.factory = e[i])), define = e.define, requirejs = e.requirejs, 
            require = e.require;
        },
        d: [ 'config', 'nextTick', 'version', 'jsExtRegExp', 'isBrowser', 's', 'toUrl', 'undef', 'defined', 'specified', 'onError', 'createNode', 'load', 'exec' ],
        h: [ 'amd', 'require' ],
        s: function() {
            if (n.e && !this.define) try {
                this.define = module.require('amdefine')(module);
                for (var e in this.define) this.s[e] = this.define[e];
            } catch (e) {
                console.log('Unable to find amdefine module.', e.message);
            }
            var i = this.define || this.factory.bind(this);
            i == this.define ? console.log('Using proxied amdefine definition.') : console.log('Using factory proxied from amdefine call.'), 
            i == this.define && this.t.auto_anonymous ? !0 !== this.i && arguments.length > 2 ? this.i = arguments[0] : arguments.length <= 2 && (this.i = !0) : (this.s = i, 
            this.n()), i.apply(i.prototype, arguments);
        },
        r: function() {
            if (commonjs_available && !this.requirejs) try {
                this.requirejs = this.o.require('requirejs');
                for (var e in this.requirejs) this.r[e] = this.requirejs[e];
            } catch (e) {
                console.log('Unable to find requirejs module.', e.message);
            }
            console.log('Using proxied requirejs method.');
            var i = this.requirejs || this.factory.bind(this);
            this.r = i, i.apply(i.prototype, arguments);
        }
    };
    for (var s in n.h) n.s.__defineGetter__(n.h[s], function(e) {
        if (commonjs_available && !n.define) try {
            n.define = module.require('amdefine')(module);
            for (var i in n.define) delete this[i], this[i] = n.define[i];
            return console.log('Using proxied amdefine method.'), n.define[e];
        } catch (e) {
            return console.log('Unable to find amdefine module.', e.message);
        }
    }.bind(null, n.h[s]));
    for (var s in n.d) n.r.__defineGetter__(n.d[s], function(e) {
        if (commonjs_available && !n.requirejs) try {
            n.requirejs = module.require('requirejs');
            for (var i in n.requirejs) delete this[i], this[i] = n.requirejs[i];
            return console.log('Using proxied requirejs method.'), n.requirejs[i];
        } catch (e) {
            return console.log('Unable to find requirejs module.', e.message);
        }
    }.bind(null, n.d[s]));
    __filename = this.e && module.filename || void 0, __dirname = this.e && module.require('path').dirname(__filename) || void 0, 
    n.n(), n.i.length && define([ n.i ], function(e) {
        return e;
    });
}(this, 'function' == typeof define && define || void 0, 'function' == typeof requirejs && requirejs || void 0, {});