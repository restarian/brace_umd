/* Generated by Brace_UMD 0.2.8 */
(function() {
    var e = {
        requirejs: typeof requirejs !== 'undefined' && requirejs || undefined,
        define: typeof define !== 'undefined' && define || undefined,
        module: typeof module !== 'undefined' && module || undefined,
        _factory: arguments[0] || undefined,
        support: {
            requirejs: true,
            define: true,
            factory: true
        },
        force_type: arguments[0] && arguments[0].force_type || arguments[1] && arguments[1].force_type,
        rjs_properties: [ 'config', 'nextTick', 'version', 'jsExtRegExp', 'isBrowser', 's', 'toUrl', 'undef', 'defined', 'specified', 'onError', 'createNode', 'load', 'exec' ],
        rjs: function() {
            if (e.module && !e.requirejs) try {
                e.requirejs = e.module.require('requirejs');
                for (var r in e.requirejs) e.rjs[r] = e.requirejs[r];
            } catch (e) {
                console.log(e.message);
            }
            var o = e.requirejs || e.factory;
            o.apply(o.prototype, arguments);
        }
    };
    for (var r in e.rjs_properties) e.rjs.__defineGetter__(e.rjs_properties[r], function(r) {
        if (e.module) try {
            e.requirejs = e.module.require('requirejs');
            for (var o in e.requirejs) e.rjs[o] = e.requirejs[o];
        } catch (e) {
            console.log(e.message);
        }
        console.log(r);
        return e.requirejs[r];
    }.bind(null, e.rjs_properties[r]));
    e.factory = e._factory && function(e, r, o, i) {
        if (e && e.constructor === Array && this.module) {
            var n = e, t = dependency, s = o, f = i;
            i = f;
            o = s;
            dependency = n;
            e = this.module.filenmame;
        }
        console.log('Using factory for module', e);
        if (typeof e !== 'string') console.log('The global native Object is attempted to be used but the module does not supply an id parameter. Skipping loading of the module.'); else if (r.every(function(r, o) {
            return r in this.factory || !!console.log('The dependency', r, 'is not loaded into the factory yet. Skipping loading of the module', e);
        }, this)) this._factory[e] = o.apply(o.prototype, r.map(function(e, r) {
            return this._factory[e];
        }, this));
    }.bind(e);
    if (e.force_type) if (!(e.force_type in e.support)) {
        console.log('The forced type', e.force_type, 'specified as an option is not supported by Brace UMD. Supported types are', Object.keys(e.support));
    } else if (!e[e.force_type]) {
        console.log('The forced type', e.force_type, 'is not available.');
    } else {
        console.log('Forcing use of the definition type', e.force_type);
        e.requirejs = e.define = e.factory = e[e.force_type];
    }
    var define = e.define || function() {
        if (e.module && !e.define) try {
            e.define = e.module.require('amdefine')(e.module);
        } catch (e) {
            console.log(e.message);
        }
        var r = e.define || e.factory;
        r.apply(r.prototype, arguments);
    };
    var requirejs = e.requirejs || e.rjs;
    define('aa', [ 'bb' ], function() {
        console.log('Init aa');
        return {
            id: 'aa'
        };
    });
    define('bb', [], function() {
        console.log('Init bb');
        return {
            id: 'aa'
        };
    });
    requirejs.config({});
    requirejs([ 'require' ], function(require) {
        console.log('Init main', __filename);
        return {
            aa: 'require("aa")',
            bb: 'require("bb")'
        };
    });
    define(function(require) {
        console.log('Init main', __filename);
        return {
            aa: require('aa'),
            bb: require('bb')
        };
    });
}(this))