/* Generated by Brace_UMD 0.6.0 */
!function(e, i, o, t) {
    var __filename, __dirname, define, requirejs, require, n = {
        e: "object" == typeof module,
        i: !1,
        filename: "",
        factory: function(i, o, t, s) {
            i && i.constructor === Array && n.e && (s = t, t = o, o = i, i = n.filename), "string" != typeof i ? console.log("The factory Object is being used but the module does not supply an id parameter. Skipping loading of the module.") : o.every(function(o) {
                return o in e || !!console.log("The dependency", o, "is not loaded into the factory. Skipping loading of the module", i);
            }) && (e[i] = t.apply(t.prototype, o.map(function(e, i) {
                return this[e];
            }, e)));
        },
        requirejs: o,
        define: i,
        o: "object" == typeof t && t || {},
        t: function() {
            var e = {
                define: !this.o.auto_anonymous && this.define || this.n.bind(this),
                requirejs: this.requirejs || this.s.bind(this),
                require: this.requirejs || this.e && module.require || this.factory,
                factory: this.factory
            }, i = this.o.force_type && this.o.force_type.toString() || "";
            i && (!i in e ? console.log("The forced type", i, "specified as an option is not supported by Brace UMD. Supported types are", Object.keys(e)) : (console.log("Forcing use of the definition type", i), 
            e.requirejs = e.require = e.define = e.factory = e[i])), define = e.define, requirejs = e.requirejs, 
            require = e.require;
        },
        r: [ "config", "nextTick", "version", "jsExtRegExp", "isBrowser", "s", "toUrl", "undef", "defined", "specified", "onError", "createNode", "load", "exec" ],
        d: [ "amd", "require" ],
        n: function() {
            if (n.e && !this.define) try {
                this.define = module.require("amdefine")(module);
                for (var e in this.define) this.n[e] = this.define[e];
            } catch (e) {
                console.log("Unable to find amdefine module.", e.message);
            }
            var i = this.define || this.factory.bind(this);
            i == this.define ? console.log("Using proxied amdefine definition.") : console.log("Using factory proxied from amdefine call."), 
            i == this.define && this.o.auto_anonymous ? !0 !== this.i && arguments.length > 2 ? this.i = arguments[0] : arguments.length <= 2 && (this.i = !0) : (this.n = i, 
            this.t()), i.apply(i.prototype, arguments);
        },
        s: function() {
            if (commonjs_available && !this.requirejs) try {
                this.requirejs = this.a.require("requirejs");
                for (var e in this.requirejs) this.s[e] = this.requirejs[e];
            } catch (e) {
                console.log("Unable to find requirejs module.", e.message);
            }
            console.log("Using proxied requirejs method.");
            var i = this.requirejs || this.factory;
            this.s = i, i.apply(i.prototype, arguments);
        }
    };
    for (var s in n.d) n.n.__defineGetter__(n.d[s], function(e) {
        if (commonjs_available && !n.define) try {
            n.define = module.require("amdefine")(module);
            for (var i in n.define) delete this[i], this[i] = n.define[i];
            return console.log("Using proxied amdefine method."), n.define[e];
        } catch (e) {
            return console.log("Unable to find amdefine module.", e.message);
        }
    }.bind(null, n.d[s]));
    for (var s in n.r) n.s.__defineGetter__(n.r[s], function(e) {
        if (commonjs_available && !n.requirejs) try {
            n.requirejs = module.require("requirejs");
            for (var i in n.requirejs) delete this[i], this[i] = n.requirejs[i];
            return console.log("Using proxied requirejs method."), n.requirejs[i];
        } catch (e) {
            return console.log("Unable to find requirejs module.", e.message);
        }
    }.bind(null, n.r[s]));
    __filename = n.e && module.filename || "", __dirname = n.e && module.require("path").dirname(__filename) || "", 
    n.t(), n.e && (n.filename = module.require("path").basename(__filename)), n.i.length && define([ n.i ], function(e) {
        return e;
    });
}(this, "function" == typeof define && define || void 0, "function" == typeof requirejs && requirejs || void 0, {});