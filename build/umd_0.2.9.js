/* Generated by Brace_UMD 0.2.9 */
(function() {
    var e = {
        e: void 0 !== requirejs && requirejs || void 0,
        o: void 0 !== define && define || void 0,
        i: 'undefined' != typeof module && module || void 0,
        n: arguments[0] || void 0,
        r: {
            e: !0,
            o: !0,
            t: !0,
            d: !0
        },
        s: arguments[0] && arguments[0].s || arguments[1] && arguments[1].s,
        f: [ 'config', 'nextTick', 'version', 'jsExtRegExp', 'isBrowser', 's', 'toUrl', 'undef', 'defined', 'specified', 'onError', 'createNode', 'load', 'exec' ],
        c: [ 'amd', 'require' ],
        a: function() {
            if (e.i && !e.o) try {
                e.o = e.i.t('amdefine');
                for (var o in e.o) this[o] = e.o[o];
            } catch (e) {
                console.log(e.message);
            }
            var i = e.o || e.d;
            i.apply(i.prototype, arguments);
        },
        u: function() {
            if (e.i && !e.e) try {
                e.e = e.i.t('requirejs');
                for (var o in e.e) this[o] = e.e[o];
            } catch (e) {
                console.log(e.message);
            }
            var i = e.e || e.d;
            i.apply(i.prototype, arguments);
        }
    };
    for (var o in e.c) e.a.__defineGetter__(e.c[o], function(o) {
        if (e.i) try {
            e.o = e.i.t('amdefine')(module);
            for (var i in e.o) this[i] = e.o[i];
        } catch (e) {
            console.log(e.message);
        }
        return e.o[o];
    }.bind(null, e.c[o]));
    for (var o in e.f) e.u.__defineGetter__(e.f[o], function(o) {
        if (e.i) try {
            e.e = e.i.t('requirejs');
            for (var i in e.e) e.u[i] = e.e[i];
        } catch (e) {
            console.log(e.message);
        }
        return e.e[o];
    }.bind(null, e.f[o]));
    e.d = e.n && function(e, o, i, n) {
        if (e && e.constructor === Array && this.i) {
            var r = e;
            dependency;
            n = n;
            i = i;
            dependency = r;
            e = this.i.l;
        }
        'string' != typeof e ? console.log('The global native Object is attempted to be used but the module does not supply an id parameter. Skipping loading of the module.') : o.every(function(o, i) {
            return o in this.n || !!console.log('The dependency', o, 'is not loaded into the factory yet. Skipping loading of the module', e);
        }, this) && (this.n[e] = i.apply(i.prototype, o.map(function(e, o) {
            return this.n[e];
        }, this)));
    }.bind(e);
    if (e.s) if (e.s in e.r) if (e[e.s]) {
        console.log('Forcing use of the definition type', e.s);
        e.e = e.t = e.o = e.d = e[e.s];
    } else console.log('The forced type', e.s, 'is not available.'); else console.log('The forced type', e.s, 'specified as an option is not supported by Brace UMD. Supported types are', Object.keys(e.r));
    var define = e.o || e.a, requirejs = e.e || e.u;
    e.i && e.i.t;
})