/* Generated by Brace_UMD 0.3.1 */
!function(e, i, n, o) {
    var r, t, d, s = {
        e: o,
        i: n,
        n: i && i.o && i || undefined,
        r: e,
        t: {
            e: true,
            i: true,
            require: true,
            d: true
        },
        f: e && e.f || n && n.f || o && o.f || undefined,
        s: [ "config", "nextTick", "version", "jsExtRegExp", "isBrowser", "s", "toUrl", "undef", "defined", "specified", "onError", "createNode", "load", "exec" ],
        c: [ "amd", "require" ],
        u: function() {
            if (s.n && !s.i) try {
                s.i = s.n.require("amdefine")(s.n);
                for (var e in s.i) s.u[e] = s.i[e];
            } catch (e) {
                console.log(e.message);
            }
            var i = s.i || s.d;
            if (i == s.i) console.log("Using proxied amdefine definition."); else console.log("Using factory proxied from amdefine call.");
            i.apply(i.prototype, arguments);
        },
        a: function() {
            if (s.n && !s.e) try {
                s.e = s.n.require("requirejs");
                for (var e in s.e) s.a[e] = s.e[e];
            } catch (e) {
                console.log(e.message);
            }
            console.log("Using proxied requirejs method.");
            var i = s.e || s.d;
            i.apply(i.prototype, arguments);
        }
    };
    for (var f in s.c) s.u.__defineGetter__(s.c[f], function(e) {
        if (s.n && !s.i) try {
            s.i = s.n.require("amdefine")(s.n);
            for (var i in s.i) {
                delete this[i];
                this[i] = s.i[i];
            }
            console.log("Using proxied amdefine method.");
            return s.i[e];
        } catch (e) {
            return console.log(e.message);
        }
    }.bind(null, s.c[f]));
    for (var f in s.s) s.a.__defineGetter__(s.s[f], function(e) {
        if (s.n && !s.e) try {
            s.e = s.n.require("requirejs");
            for (var i in s.e) {
                delete this[i];
                this[i] = s.e[i];
            }
            console.log("Using proxied requirejs method.");
            return s.e[i];
        } catch (e) {
            return console.log(e.message);
        }
    }.bind(null, s.s[f]));
    s.d = s.r && function(e, i, n, o) {
        if (e && e.constructor === Array && this.n) {
            var r = e, t = dependency, d = n, s = o;
            o = s;
            n = d;
            dependency = r;
            e = this.n.l;
        }
        if (typeof e !== "string") console.log("The global native Object is attempted to be used but the module does not supply an id parameter. Skipping loading of the module."); else if (i.every(function(i, n) {
            return i in this.r || !!console.log("The dependency", i, "is not loaded into the factory yet. Skipping loading of the module", e);
        }, this)) this.r[e] = n.apply(n.prototype, i.map(function(e, i) {
            return this.r[e];
        }, this));
    }.bind(s);
    if (s.f) if (!(s.f in s.t)) {
        console.log("The forced type", s.f, "specified as an option is not supported by Brace UMD. Supported types are", Object.keys(s.t));
    } else if (!s[s.f]) {
        console.log("The forced type", s.f, "is not available.");
    } else {
        console.log("Forcing use of the definition type", s.f);
        s.e = s.require = s.i = s.d = s[s.f];
    }
    t = s.i || s.u;
    d = s.e || s.a;
    r = s.n && s.n.require || d;
    t("module_one", [], function() {
        var e = "module_one";
        console.log(e + " has initialized.");
        var i = {};
        i.id = e;
        return i;
    });
    t("second_module", [], function() {
        var e = "second_module";
        console.log(e + " has initialized.");
        var i = {};
        i.id = e;
        return i;
    });
    t("entry", [ "module_one", "second_module" ], function(e, i) {
        var n = "entry";
        console.log(n + " has initialized.");
        var o = {};
        o.id = n;
        o[e.id] = e;
        o[i.id] = i;
        return o;
    });
}(this, typeof module == "object" && module || undefined, typeof define == "function" && define || undefined, typeof requirejs == "function" && requirejs || undefined);