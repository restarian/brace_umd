/* Generated by Brace_UMD 0.7.0 */
!function(e, i, o, r) {
    var n, t, s, d = {
        commonjs_available: "object" == typeof module,
        _last_define_id: !1,
        factory: function(i, o, r, n) {
            i && i.constructor === Array ? (n = r, r = o, o = i, i = "") : "string" != typeof i && (n = o, 
            r = i, o = [], i = "");
            var t = this.commonjs_available && module.exports || e, s = [], d = /^\.[\/,\\]/, a = !1;
            if (!0 !== this._last_define_id) if (i) this._last_define_id = i; else {
                if (this._last_define_id = !0, !this.commonjs_available) return !!console.log("The factory definition is being used outside of a commonjs envrionment and the module does not supply an id parameter. Skipping loading of the module. Note: the last module loaded was", this._last_define_id);
                if (!o.every(function(e) {
                    return "require" !== (e = e.replace(d, "")) && e in t || !!console.log("The dependency", e, "is not loaded into the factory. Skipping loading of the anonymous module");
                })) return null;
                a = !0, s = o.map(function(e, i) {
                    return this[e.replace(d, "")];
                }, t), this.commonjs_available ? module.exports = r.apply(r.prototype, s) : e = r.apply(r.prototype, s);
            }
            !a && o.every(function(e) {
                return "require" === (e = e.replace(d, "")) || e in t || !!console.log("The dependency", e, "is not loaded into the factory. Skipping loading of the module", i);
            }) && (t[i] = r.apply(r.prototype, o.map(function(e, i) {
                return this[e.replace(d, "")];
            }, t)));
        },
        requirejs: o,
        define: i,
        data: "object" == typeof r && r || {},
        set_global: function() {
            var e = {
                define: !this.data.auto_anonymous && this.define || this.define_proxy,
                requirejs: this.requirejs || this.requirejs_proxy,
                require: this.requirejs || this.commonjs_available && module.require || this.factory.bind(this),
                factory: this.factory.bind(this)
            }, i = this.data.force_type && this.data.force_type.toString() || "";
            i && (!i in e ? console.log("The forced type", i, "specified as an option is not supported by Brace UMD. Supported types are", Object.keys(e)) : (console.log("Forcing use of the definition type", i), 
            e.requirejs = e.require = e.define = e.factory = e[i])), n = e.define, t = e.requirejs, 
            s = e.require;
        },
        requirejs_proxy_key: [ "config", "nextTick", "version", "jsExtRegExp", "isBrowser", "s", "toUrl", "undef", "defined", "specified", "onError", "createNode", "load", "exec" ],
        define_proxy_key: [ "amd", "require" ],
        define_proxy: function() {
            if (d.commonjs_available && !d.define) try {
                d.define = module.require("amdefine")(module);
                for (var e in d.define) d.define_proxy[e] = d.define[e];
            } catch (e) {
                console.log("Brace UMD is unable to find the amdefine module.", e.message);
            }
            var i = d.define || d.factory.bind(this);
            i == d.define ? console.log("Using proxied amdefine definition.") : console.log("Using factory proxied from amdefine call."), 
            i == d.define && d.data.auto_anonymous ? !0 !== d._last_define_id && "string" == typeof arguments[0] ? d._last_define_id = arguments[0] : "string" != typeof arguments[0] && (d._last_define_id = !0) : (d.define_proxy = i, 
            d.set_global()), i.apply(i.prototype, arguments);
        },
        requirejs_proxy: function() {
            if (d.commonjs_available) try {
                d.requirejs = module.require("requirejs");
            } catch (e) {
                console.log("Brace UMD is unable to find the requirejs module.", e.message);
            }
            console.log("Using proxied requirejs method."), d.requirejs_proxy = d.requirejs || d.factory.bind(d), 
            d.set_global(), d.requirejs_proxy.apply(d.requirejs_proxy.prototype, arguments);
        }
    };
    for (var a in d.define_proxy_key) d.define_proxy.__defineGetter__(d.define_proxy_key[a], function(e) {
        if (d.commonjs_available && !d.define) try {
            d.define = module.require("amdefine")(module);
            for (var i in d.define) delete this[i], this[i] = d.define[i];
            return console.log("Using proxied amdefine method."), d.define[e];
        } catch (e) {
            return console.log("Brace UMD is unable to find the amdefine module.", e.message);
        }
    }.bind(null, d.define_proxy_key[a]));
    if (!t) for (var a in d.requirejs_proxy_key) d.requirejs_proxy.__defineGetter__(d.requirejs_proxy_key[a], function(e) {
        if (d.commonjs_available) try {
            return d.requirejs = module.require("requirejs"), console.log("Using proxied requirejs method to access requirejs." + e), 
            d.requirejs_proxy = d.requirejs, d.set_global(), d.requirejs[e];
        } catch (e) {
            return console.log("Brace UMD is unable to find the requirejs module.", e.message);
        }
    }.bind(null, d.requirejs_proxy_key[a]));
    d.set_global();
    n("module_one", [], function() {
        var e = "module_one";
        console.log(e + " has initialized.");
        var i = {};
        i.id = e;
        return i;
    });
    n("second_module", [], function() {
        var e = "second_module";
        console.log(e + " has initialized.");
        var i = {};
        i.id = e;
        return i;
    });
    n("entry", [ "module_one", "second_module" ], function(e, i) {
        var o = "entry";
        console.log(o + " has initialized.");
        var r = {};
        r.id = o;
        r[e.id] = e;
        r[i.id] = i;
        return r;
    });
    d._last_define_id.length && n([ d._last_define_id ], function(e) {
        return e;
    });
}(this, "function" == typeof define && define || void 0, "function" == typeof requirejs && requirejs || void 0, {});