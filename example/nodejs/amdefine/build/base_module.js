/* Generated by Brace_UMD 0.3.1 */
(function() {
    var e = {
        requirejs: void 0 !== requirejs && requirejs || void 0,
        define: "function" == typeof define && define || void 0,
        module: "undefined" != typeof module && module || void 0,
        _factory: arguments[0] || void 0,
        support: {
            requirejs: !0,
            define: !0,
            require: !0,
            factory: !0
        },
        force_type: arguments[0] && arguments[0].force_type || arguments[1] && arguments[1].force_type,
        rjs_key: [ "config", "nextTick", "version", "jsExtRegExp", "isBrowser", "s", "toUrl", "undef", "defined", "specified", "onError", "createNode", "load", "exec" ],
        dfn_key: [ "amd", "require" ],
        dfn: function() {
            if (e.module && !e.define) try {
                e.define = e.module.require("amdefine")(e.module);
                for (var r in e.define) this[r] = e.define[r];
            } catch (e) {
                console.log(e.message);
            }
            var o = e.define || e.factory;
            o.apply(o.prototype, arguments);
        },
        rjs: function() {
            if (e.module && !e.requirejs) try {
                e.requirejs = e.module.require("requirejs");
                for (var r in e.requirejs) this[r] = e.requirejs[r];
            } catch (e) {
                console.log(e.message);
            }
            var o = e.requirejs || e.factory;
            o.apply(o.prototype, arguments);
        }
    };
    for (var r in e.dfn_key) e.dfn.__defineGetter__(e.dfn_key[r], function(r) {
        if (e.module) try {
            e.define = e.module.require("amdefine")(e.module);
            for (var o in e.define) this[o] = e.define[o];
        } catch (e) {
            console.log(e.message);
        }
        return e.define[r];
    }.bind(null, e.dfn_key[r]));
    for (var r in e.rjs_key) e.rjs.__defineGetter__(e.rjs_key[r], function(r) {
        if (e.module) try {
            e.requirejs = e.module.require("requirejs");
            for (var o in e.requirejs) e.rjs[o] = e.requirejs[o];
        } catch (e) {
            console.log(e.message);
        }
        return e.requirejs[r];
    }.bind(null, e.rjs_key[r]));
    e.factory = e._factory && function(e, r, o, i) {
        if (e && e.constructor === Array && this.module) {
            var t = e;
            dependency;
            i = i, o = o, dependency = t, e = this.module.filenmame;
        }
        "string" != typeof e ? console.log("The global native Object is attempted to be used but the module does not supply an id parameter. Skipping loading of the module.") : r.every(function(r, o) {
            return r in this._factory || !!console.log("The dependency", r, "is not loaded into the factory yet. Skipping loading of the module", e);
        }, this) && (this._factory[e] = o.apply(o.prototype, r.map(function(e, r) {
            return this._factory[e];
        }, this)));
    }.bind(e), e.force_type && (e.force_type in e.support ? e[e.force_type] ? (console.log("Forcing use of the definition type", e.force_type), 
    e.requirejs = e.require = e.define = e.factory = e[e.force_type]) : console.log("The forced type", e.force_type, "is not available.") : console.log("The forced type", e.force_type, "specified as an option is not supported by Brace UMD. Supported types are", Object.keys(e.support)));
    var define = e.define || e.dfn, requirejs = e.requirejs || e.rjs;
    e.module && e.module.require;
;

define("second_module", [], function() {
  var id = "second_module"
  console.log(id + " has initialized.")
  var mod = {}
  mod.id = id
  return mod
})
;

define('base_module',["second_module"], function(dependency) {
  var id = "base_module"
  console.log(id + " has initialized.")
  var mod = {}
  mod.id = id
  mod[dependency.id] = dependency 
  return mod
})
;
})(this)
