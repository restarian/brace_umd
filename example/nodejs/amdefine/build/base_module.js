/* Generated by Brace_UMD 0.3.1 */
(function() {
    var umd = {
        requirejs: typeof requirejs !== "undefined" && requirejs || undefined,
        define: typeof define === "function" && define || undefined,
        module: typeof module !== "undefined" && module || undefined,
        _factory: arguments[0] || undefined,
        support: {
            requirejs: true,
            define: true,
            require: true,
            factory: true
        },
        force_type: arguments[0] && arguments[0].force_type || arguments[1] && arguments[1].force_type,
        rjs_key: [ "config", "nextTick", "version", "jsExtRegExp", "isBrowser", "s", "toUrl", "undef", "defined", "specified", "onError", "createNode", "load", "exec" ],
        dfn_key: [ "amd", "require" ],
        dfn: function() {
            if (umd.module && !umd.define) try {
                umd.define = umd.module.require("amdefine")(umd.module);
                for (var p in umd.define) this[p] = umd.define[p];
            } catch (e) {
                console.log(e.message);
            }
            var use_type = umd.define || umd.factory;
            use_type.apply(use_type.prototype, arguments);
        },
        rjs: function() {
            if (umd.module && !umd.requirejs) try {
                umd.requirejs = umd.module.require("requirejs");
                for (var p in umd.requirejs) this[p] = umd.requirejs[p];
            } catch (e) {
                console.log(e.message);
            }
            var use_type = umd.requirejs || umd.factory;
            use_type.apply(use_type.prototype, arguments);
        }
    };
    for (var o in umd.dfn_key) umd.dfn.__defineGetter__(umd.dfn_key[o], function(key) {
        if (umd.module) try {
            umd.define = umd.module.require("amdefine")(umd.module);
            for (var p in umd.define) this[p] = umd.define[p];
        } catch (e) {
            console.log(e.message);
        }
        return umd.define[key];
    }.bind(null, umd.dfn_key[o]));
    for (var o in umd.rjs_key) umd.rjs.__defineGetter__(umd.rjs_key[o], function(key) {
        if (umd.module) try {
            umd.requirejs = umd.module.require("requirejs");
            for (var p in umd.requirejs) umd.rjs[p] = umd.requirejs[p];
        } catch (e) {
            console.log(e.message);
        }
        return umd.requirejs[key];
    }.bind(null, umd.rjs_key[o]));
    umd.factory = umd._factory && function(id, dependancy, callback, error_callback) {
        if (id && id.constructor === Array && this.module) {
            var i = id, d = dependency, cb = callback, err_cb = error_callback;
            error_callback = err_cb;
            callback = cb;
            dependency = i;
            id = this.module.filenmame;
        }
        if (typeof id !== "string") console.log("The global native Object is attempted to be used but the module does not supply an id parameter. Skipping loading of the module."); else if (dependancy.every(function(value, index) {
            return value in this._factory || !!console.log("The dependency", value, "is not loaded into the factory yet. Skipping loading of the module", id);
        }, this)) this._factory[id] = callback.apply(callback.prototype, dependancy.map(function(value, index) {
            return this._factory[value];
        }, this));
    }.bind(umd);
    if (umd.force_type) if (!(umd.force_type in umd.support)) {
        console.log("The forced type", umd.force_type, "specified as an option is not supported by Brace UMD. Supported types are", Object.keys(umd.support));
    } else if (!umd[umd.force_type]) {
        console.log("The forced type", umd.force_type, "is not available.");
    } else {
        console.log("Forcing use of the definition type", umd.force_type);
        umd.requirejs = umd.require = umd.define = umd.factory = umd[umd.force_type];
    }
    var define = umd.define || umd.dfn;
    var requirejs = umd.requirejs || umd.rjs;
    var require = umd.module && umd.module.require || requirejs;
;

define("second_module", [], function() {
  var id = "second_module"
  console.log(id + " has initialized.")
  var mod = {}
  mod.id = id
  return mod
})
;

define('base_module',["second_module"], function(dependency) {
  var id = "base_module"
  console.log(id + " has initialized.")
  var mod = {}
  mod.id = id
  mod[dependency.id] = dependency 
  return mod
})
;
})(this)
